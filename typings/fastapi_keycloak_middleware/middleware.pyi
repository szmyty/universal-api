"""
This type stub file was generated by pyright.
"""

import typing
from starlette.types import ASGIApp, Receive, Scope, Send
from fastapi_keycloak_middleware.schemas.keycloak_configuration import KeycloakConfiguration

"""
This module provides the middleware for the FastAPI framework.

It is inspired by the fastapi-auth-middleware package published
here: https://github.com/code-specialist/fastapi-auth-middleware
"""
log = ...
class KeycloakMiddleware:
    """
    This class represents the middleware for FastAPI. It will authenticate
    a user based on a token. It currently only supports one backend
    (Keycloak backend).

    The middleware will add the user object to the request object. It
    optionally can also compile a list of scopes and add it to the request
    object as well, which can later be used for authorization.

    :param app: The FastAPI app instance, is automatically passed by FastAPI
    :type app: FastAPI
    :param keycloak_configuration: KeyCloak configuration object. For potential
        options, see the KeycloakConfiguration schema.
    :type keycloak_configuration: KeycloakConfiguration
    :param exclude_patterns: List of paths that should be excluded from authentication.
        Defaults to an empty list. The strings will be compiled to regular expressions
        and used to match the path. If the path matches, the middleware
        will skip authentication.
    :type exclude_patterns: typing.List[str], optional
    :param user_mapper: Custom async function that gets the userinfo extracted from AT
        and should return a representation of the user that is meaningful to you,
        the user of this library, defaults to None
    :type user_mapper:
        typing.Callable[ [typing.Dict[str, typing.Any]], typing.Awaitable[typing.Any] ]
        optional
    :param scope_mapper: Custom async function that transforms the claim values
        extracted from the token to permissions meaningful for your application,
        defaults to None
    :type scope_mapper:
        typing.Callable[[typing.List[str]], typing.Awaitable[typing.List[str]]], optional
    """
    def __init__(self, app: ASGIApp, keycloak_configuration: KeycloakConfiguration, exclude_patterns: typing.List[str] | None = ..., user_mapper: typing.Callable[[typing.Dict[str, typing.Any]], typing.Awaitable[typing.Any]] | None = ..., scope_mapper: typing.Callable[[typing.List[str]], typing.Awaitable[typing.List[str]]] | None = ...) -> None:
        """Middleware constructor"""
        ...
    
    async def __call__(self, scope: Scope, receive: Receive, send: Send): # -> None:
        ...
    


